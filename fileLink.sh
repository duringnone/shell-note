#!/bin/bash 

 #linux的文件链接 

# 1、Linux 链接概念
#	Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。默认情况下，ln 命令产生硬链接。
# 1) 硬连接
#	硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，A 和 B 对文件系统来说是完全平等的。删除其中任何一个都不会影响另外一个的访问。
#	硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。
# 2) 软连接
#另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于 Windows 的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。A 和 B 之间是“主从”关系，如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。


# 2、  实验方法(检测硬链接和符号链接(软连接)区别的):
touch f1	# 创建文件f1
ln f1 f2	# 给文件f1 创建一个硬链接f2
ln -s f1 f3	# 给文件f1 创建一个软连接f3

ls -li		# 列出当前目录下所有文件,以及文件属性和 文件的 索引节点号 (Inode Index)

# 3、 注意：
## 1)  f1 和 f2 索引节点号相同, 即二者指向的是同一个 Inode Index,当删除f1时,访问f2不受影响,访问f3失效(因为f3的数据中存放的f1的地址链接,而不是文件内容)

# 4、 总结: 
## 1)  每个 Inode Index 指向一个数据块,相同的索引节点号的两个文本本质上是同一个文件
## 2)  每个文件由两部分组成: 文件名 和 文件索引节点(Inode Index),每Inode Index 指向一个数据块,一个数据块可以对应多个文件名,如 f1 和 f2 就指向同一个 Inode Index; 当数据块内容被修改时,同一数据块对应的所有文件内容都被同一修改,(类似: PHP中的引用传参,多个变量指向同一内存块,任一变量值改变,则内存块内容改变,但是变量别名删除,内存块内容仍然存在,只有当所有变量名删除,内存块才会被清空)
## 3) 硬链接f2 链接的是f1的数据块(文件内容),软链接f3相当于是快捷方式,真正访问的是f1文件->f1数据块




# 5、 ??? touch , echo , 和 vim 一个文件名(可能是不存在的文件)的区别
# touch 文件1 文件2	# 只创建文件,不写入内容,即创建空文件;可同时创建多个空文件
